.Dd February 23, 2022
.Dt chaqum 1
.Os
.Sh NAME
.Nm chaqum
.Nd [ˈkeɪkjuːm], the queue manager for chaotic job queues
.Sh SYNOPSIS
.Nm
.Op Fl hv
.Op Fl e Ar ENTRY
.Op Fl l Ar LOG
.Ar DIRECTORY
.Op Ar ARGUMENT ...
.Sh DESCRIPTION
Start a job manager with
.Ar DIRECTORY
as its job tree passing
.Ar ARGUMENT ...
as commandline parameters to the initial job script
.Ar ENTRY .
Then run the job manager as long as there are jobs running or repeats
registered or it receives
.Dv SIGINT ,
.Dv SIGHUP
or
.Dv SIGTERM .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl d , \-daemonize Ar PIDFILE[:USER:GROUP]
Daemonize job manager. Use PIDFILE as lockfile to ensure only one
instance is running. If USER and GROUP are specified run job manager
under these credentials (this usually requires you to be root).
.It Fl e , \-entry Ar ENTRY
Set the entry script to run as the first in the job tree. Defaults to
.Dv 'entry' .
.It Fl h
Show a help message and exit.
.It Fl l , \-log Ar LOG
Configure logging. Can be one of
.Dv 'console'
for logging to stderr or
.Dv 'syslog[:[APPNAME][:FACILITY][:SOCKET_PATH]]'
for sane defaults for logging to local Syslog. Otherwise the will be
interpreted as the path to a JSON file containing the
.Fn logging.config.dictConfig
format. Defaults to
.Dv 'syslog'
if running as a daemon
.Dv 'console'
otherwise.
.It Fl v
Turn on verbose logging. Can be repeated up to two times for even more
verbosity.
.El
.Sh JOB TREES
Job trees are simply directory trees with at least one executable
somewhere inside. The only requirement for these executables is, that
they either use the
.Nm chaqum
protocol to communicate with the job manager (see
.Sx PROTOCOL
if you're interested in the inner workings) or completly ignore file
descriptors 3 and 4.
.Pp
Having exclusivly executables of only the later type is unusual since
such job trees can't make use of
.Nm chaqum's
job management, process spawning and inter-process messaging.
.Pp
Most commonly job excutables will be written in an interpreted language
and use one of the client libraries. References to those are in the
.Sx SEE ALSO
section.
.Pp
The layout of the job tree directory as well as what exactly consitutes
a single job (and thus executable within that job tree) is completly
up to the user. There are simple examples demonstrating different
features, available in the projects
.Lk https://github.com/wagnerflo/chaqum/tree/main/examples Git Repository .
.Sh LOGGING
.Nm chaqum
captures everything the job processes write to stdout and stderr and
redirects it to its interal logging mechanism (console, default local
Syslog configuration or custom Python
.Lk https://docs.python.org/3/library/logging.config.html?highlight=logging#dictionary-schema-details "logging configuration" ;
see
.Sy -l
option). It generates one log message per line of output.
.Pp
By default messages are logged with log level
.Lk https://docs.python.org/3/library/logging.html#levels INFO ,
but jobs can select the level by prepending the lines with one of
.Dl C<US>
.Dl E<US>
.Dl W<US>
.Dl I<US>
.Dl D<US>
.Pp
to log as level CRITICAL, ERROR, WARNING, INFO and DEBUG respectivly
(in Syslog terminology these are
.Dv LOG_CRIT ,
.Dv LOG_ERR ,
.Dv LOG_WARNING ,
.Dv LOG_INFO
and
.Dv LOG_DEBUG
respectivly).
.Dv <US>
refers to the ASCII unit seperator character a.k.a. decimal 31, hex
0x1F or octal 037.
.Pp
The client libraries supply functions that make logging using this
protocol easy.
.Sh PROTOCOL
To allow jobs to communicate with the job manager
.Nm chaqum
implements a simple line based protocol. Communication is always
initiated by the job; never by the server. Commands are handled one
after the other and always follow the flow of: Job writes command to
file descriptor 3, job reads managers reply by reading from file
descriptor 4.
.Ss Adding new jobs to be started
.Bd -literal -offset indent
> enqueue [-F] [-g GROUP] [-m MAXPROC] [-c MAXCPU] -- SCRIPT [ARGUMENT ...]<LF>
< { S JOBIDENT<LF>,
    E<LF> }
.Ed
.Ss Adding new repeats to the scheduler
.Bd -literal -offset indent
> repeat [-c CRON] [-i INTERVAL] -- SCRIPT [ARGUMENT ...]<LF>
< { S<LF>,
    E<LF> }
.Ed
.Ss Waiting for jobs to finish running
.Bd -literal -offset indent
> waitjobs [-t TIMEOUT] -- JOBIDENT [...]<LF>
< { S JOBIDENT {T,N,EXITCODE} [...]<LF>,
    E<LF> }
.Ed
.Ss Forcibly terminating jobs and wait for them to be killed
.Bd -literal -offset indent
> killjobs [-t TIMEOUT] -- JOBIDENT [...]<LF>
< { S JOBIDENT {T,N,EXITCODE} [...]<LF>,
    E<LF> }
.Ed
.Ss Queuing a inter-jobs message for delivery
.Bd -literal -offset indent
> sendmsg -- JOBIDENT LENGTH<LF>
  BYTES<LF>
< { S MSGIDENT<LF>,
    E<LF> }
.Ed
.Ss Waiting for a message to be delivered
.Bd -literal -offset indent
> waitrecv [-t TIMEOUT] -- MSGIDENT [...]<LF>
< { S MSGIDENT {T,R} [...]<LF>
    E<LF> }
.Ed
.Ss Receiving a message
.Bd -literal -offset indent
> recvmsg [-t TIMEOUT]<LF>
< { S LENGTH<LF>
    BYTES<LF>,
    E<LF> }
.Ed
.Sh SEE ALSO
.Xr chaqum.lib 3
\(em Python job library.
.Sh COPYRIGHT
Written by Florian Wagner.
